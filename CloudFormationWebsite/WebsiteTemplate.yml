AWSTemplateFormatVersion: 2010-09-09

Parameters:
    BucketName:
      Type: String
    TableName: 
      Type: String
    PolicyName: 
      Type: String
    ApiName: 
      Type: String
    ApiName1: 
      Type: String
    Stage:
      Type: String
    LambdaName:
      Type: String
    CopierLambdaName:
      Type: String
    RandomGenerator:
      Type: String

Resources:
  WebsiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        ErrorDocument: Website.html
        IndexDocument: website.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  S3Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Id: Testonetwothree
        Version: '2012-10-17'
        Statement:
          - Sid: MyPolicyDoc
            Action: 's3:GetObject'
            Effect: Allow
            Principal: '*'
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'

  MyDynamoDb:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref TableName
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        -
          AttributeName: "user_name"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "user_name"
          KeyType: "HASH"

  MyLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Ref PolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Putitem'
                Resource: !GetAtt MyDynamoDb.Arn
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                Resource: !Join ['',["arn:aws:logs:",!Ref "AWS::Region",":",!Ref "AWS::AccountId",":*"]]
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Join ['',["arn:aws:logs:",!Ref "AWS::Region",":",!Ref "AWS::AccountId",":log-group:/aws/lambda/",!Ref LambdaName,":*"]]

  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaName
      Role: !GetAtt MyLambdaRole.Arn
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Environment:
        Variables:
          stagename: !Ref Stage
          urlbucket: !Join ['',["http://",!Ref "WebsiteBucket",".s3-website-",!Ref "AWS::Region",".amazonaws.com"]]
          databasename: !Ref MyDynamoDb
      Code:
        S3Bucket: gabriel-awsprojects
        S3Key: index.zip

  MyRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ApiName1

  MyApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyRestApi.RootResourceId
      PathPart: !Ref MyLambdaFunction
      RestApiId: !Ref MyRestApi

  MyApiGatewaymethod:
      Type: 'AWS::ApiGateway::Method'
      Properties:
        AuthorizationType: NONE
        HttpMethod: GET
        MethodResponses:
          - StatusCode: 200
        Integration: 
          Type: AWS_PROXY
          IntegrationResponses:
            - StatusCode: 200
          IntegrationHttpMethod: POST
          Uri: !Sub 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations'
        ResourceId: !Ref MyApiResource
        RestApiId: !Ref MyRestApi

  ApiDeployment:
    DependsOn: MyApiGatewaymethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MyRestApi
      StageName: !Ref Stage

  LambdaInvokePerms:
    DependsOn: ApiDeployment
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  MyLambdaRole2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Ref PolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                Resource: !Join ['',["arn:aws:logs:",!Ref "AWS::Region",":",!Ref "AWS::AccountId",":*"]]
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Join ['',["arn:aws:logs:",!Ref "AWS::Region",":",!Ref "AWS::AccountId",":log-group:/aws/lambda/",!Ref LambdaName,":*"]]

  RandNumberLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref RandomGenerator
      Role: !GetAtt MyLambdaRole2.Arn
      Runtime: python3.12
      Handler: index.lambda_handler
      Environment:
        Variables:
          urlbucket: !Join ['',["http://",!Ref "WebsiteBucket",".s3-website-",!Ref "AWS::Region",".amazonaws.com"]]
      Code:
        ZipFile: |
          import json
          import random
          import os

          def lambda_handler(event, context):
              #gets min and max from the webpage and checks if its numbers, min<=max, and then selects a random numebr between the range
              message = ''
              urlbucket = os.environ["urlbucket"]
              min = 0
              max = 0
              min = event.get('queryStringParameters').get('min')
              max = event.get('queryStringParameters').get('max')
              if False==min.isnumeric() or False==max.isnumeric():
                  message = 'Input only numbers'
              elif min>max:
                  message = 'Min is smaller than max'
              else:
                  message = random.randint(int(min),int(max))
                  
              #html document displaying the random number and a button to return to main page    
              html="""
              <!DOCTYPE html>
              <html>
              <style>
              input[type=submit]{
              text-align: center;
              font-size: 16px;
              margin: 6px 6px;
              cursor: pointer;
              }
              </style>
              <body>
              <h1>"""+str(message)+"""</h1>
              <form action=" """ + urlbucket + """ ">
              <input type="submit" value="Return to Main Page">
              </form>
              <form action=" """ + urlbucket + """/RandomNumber.html?">
              <input type="submit" value="Return to Random Number Generator">
              </form>
              </body>
              </html>
              """
                  
              return {
                  'statusCode': 200,
                  'body': html,
                  "headers":{
                      'Content-Type': 'text/html',
                  }
              }


  MyRestApi1:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName

  MyApiResource1:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyRestApi1.RootResourceId
      PathPart: !Ref RandNumberLambda
      RestApiId: !Ref MyRestApi1

  MyApiGatewaymethod1:
      Type: 'AWS::ApiGateway::Method'
      Properties:
        AuthorizationType: NONE
        HttpMethod: GET
        MethodResponses:
          - StatusCode: 200
        Integration: 
          Type: AWS_PROXY
          IntegrationResponses:
            - StatusCode: 200
          IntegrationHttpMethod: POST
          Uri: !Sub 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${RandNumberLambda.Arn}/invocations'
        ResourceId: !Ref MyApiResource1
        RestApiId: !Ref MyRestApi1

  ApiDeployment1:
    DependsOn: MyApiGatewaymethod1
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MyRestApi1
      StageName: !Ref Stage

  LambdaInvokePerms1:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RandNumberLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  MyLambdaRole1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Ref PolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Join ['',[!GetAtt "WebsiteBucket.Arn","/*"]]
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: 'arn:aws:s3:::gabriel-awsprojects/*'  
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                Resource: !Join ['',["arn:aws:logs:",!Ref "AWS::Region",":",!Ref "AWS::AccountId",":*"]]
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Join ['',["arn:aws:logs:",!Ref "AWS::Region",":",!Ref "AWS::AccountId",":log-group:/aws/lambda/",!Ref CopierLambdaName,":*"]]

  MyLambdaFunctionCopyer:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref CopierLambdaName
      Role: !GetAtt MyLambdaRole1.Arn
      Runtime: python3.12
      Handler: index.lambda_handler
      Environment:
        Variables:
          BucketName: !Ref BucketName
          urlbucket: !Join ['',["http://",!Ref "WebsiteBucket",".s3-website-",!Ref "AWS::Region",".amazonaws.com"]]
          ApiUrl: !Join ['',["https://",!Ref "MyRestApi",".execute-api.",!Ref "AWS::Region",".amazonaws.com/",!Ref "Stage","/",!Ref "MyLambdaFunction"]]
          RandomApi: !Join ['',["https://",!Ref "MyRestApi1",".execute-api.",!Ref "AWS::Region",".amazonaws.com/",!Ref "Stage","/",!Ref "RandNumberLambda"]]
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import cfnresponse

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              print("this is event -> "+str(event))
              print("this is context -> "+str(context))
              userlogin = userloginfile()
              randomNumber = randomnumber()
              key = ['website.html']    
              destination_bucket = os.environ["BucketName"]
              for x in key:
                  source = {'Bucket': 'gabriel-awsprojects', 'Key': x}
                  response = s3.copy(source, destination_bucket, x)
              s3.put_object(Bucket=destination_bucket,Key="userlogin.html",Body=userlogin,ContentType ="text/html")
              s3.put_object(Bucket=destination_bucket,Key="RandomNumber.html",Body=randomNumber,ContentType ="text/html")
              cfnresponse.send(event, context, cfnresponse.SUCCESS,{})

          def randomnumber():
            randomapi = os.environ["RandomApi"]
            urlbucket = os.environ["urlbucket"]
            http = """
              <!doctype html>
              <html lang="en">
              <style>
              input[type=submit]{
                text-align: center;
                font-size: 16px;
                margin: 6px 6px;
                cursor: pointer;
              }


              </style>
                  <body style="background-color:white;">
                <h1> This is Random Generator</h1>
                <form action=" """ + randomapi + """ " method="get">
                  <label for="min">Enter Min Value:</label>
                <input type="text" id="min" name="min" value="1">
                <label for="max">Enter Max Value:</label>
                <input type="text" id="max" name="max" value="10"></br>
                <input type="submit" value="Submit">
                </form>

                <form action=" """+urlbucket+""" ">
                <input type="submit" value="Main Page">
                </form>
                
                </body>
                </html>
            """
            return http

          def userloginfile():
            test = os.environ["ApiUrl"]
            urlbucket = os.environ["urlbucket"]
            http = """
            <!DOCTYPE html>
            <html>
            <style>
              @media(max-width: 1000px){
                  form{
                    width:750px;   
                    text-alignment:center;
                      margin:0 auto;
                      background:white;
                        padding-right:25px;
                    }
                    h1{
                    font-size: clamp(60px,3vw,100px);
                    text-align:center;
                    }
                    
                    input[type=submit]{
                    background-color:orange;
                    width: 100%;
                    text-align:center;
                    font-size: clamp(30px,3vw,40px);
                      margin:6px 10px;
                      cursor: pointer;
                    }
                    input[type=text]{
              
                    width:725px;
                    text-align: left;
                    font-size: clamp(30px,3vw,40px);
                    margin:6px 10px;
                    cursor: pointer;
                    }
                    lable{
                    width: 300px;
                    display:block;
                    font-size: clamp(30px,3vw,40px);
                    margin: 6px 6px;
                      cursor: pointer;
                    }
              body {
                background-color: lightgray;
                    }
              }

              @media(min-width: 1000px){
                  form{
                    width:750px;   
                    text-alignment:center;
                      margin:0 auto;
                      background:white;
                        padding-right:25px;
                    }
                    h1{
                    font-size: clamp(60px,3vw,100px);
                    text-align:center;
                    }
                    
                    input[type=submit]{
                    background-color:orange;
                    width: 100%;
                    text-align:center;
                    font-size: clamp(30px,3vw,40px);
                      margin:6px 10px;
                      cursor: pointer;
                    }
                    input[type=text]{
              
                    width:750px;
                    text-align: left;
                    font-size: clamp(30px,3vw,40px);
                    margin:6px 10px;
                    cursor: pointer;
                    }
                    lable{
                    width: 300px;
                    display:block;
                    font-size: clamp(30px,3vw,40px);
                    margin: 6px 6px;
                      cursor: pointer;
                    }
              body {
                background-color: lightgray;
                    }
              }
                    </style>
            <body>
              <form action=" """ + test + """ " method="get">
                <lable for="user_id">Enter UserID</lable>
                <input type="text" id="user_id" name="user_id"></br>
                <lable for="password">Enter Password</lable>
                <input type="text" id="password" name="password"></br>
                <input type="submit" value="Log In">
                </form>
                <form action=" """+urlbucket+""" ">
                <input type="submit" value="Main Page">
                </form>


            </body>
            </html>
            """
            return http

  LambdaFunctionExecute:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken: !GetAtt MyLambdaFunctionCopyer.Arn